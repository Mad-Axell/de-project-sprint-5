import logging

import pendulum
from airflow.decorators import dag, task
from airflow.models.variable import Variable

from stg.models.pg_ranks_loader import PG_RankLoader
from stg.models.pg_users_loader import PG_UserLoader
from stg.models.pg_events_loader import PG_EventLoader
from stg.models.mg_restaurants_loader import MG_RestaurantLoader, RestaurantOriginRepository, RestaurantDestRepository
from stg.models.mg_users_loader import MG_UserLoader, UserOriginRepository, UserDestRepository
from stg.models.mg_orders_loader import MG_OrderLoader, OrderOriginRepository, OrderDestRepository


from lib import ConnectionBuilder, MongoConnect

from config_const import ConfigConst


log = logging.getLogger(__name__)


@dag(
    schedule_interval='0/30 * * * *',
    start_date=pendulum.datetime(2022, 5, 5, tz="UTC"),
    catchup=False,
    tags=['stg', 'origin'],
    is_paused_upon_creation=False
)
def stg_dag():

    # Создаем подключение к базе dwh.
    dwh_pg_connect = ConnectionBuilder.pg_conn("PG_WAREHOUSE_CONNECTION")

    # Создаем подключение к базе подсистемы бонусов.
    origin_pg_connect = ConnectionBuilder.pg_conn("PG_ORIGIN_BONUS_SYSTEM_CONNECTION")
    
    # Получаем переменные из Airflow для подключения к MONGO_DB.
    cert_path = Variable.get("MONGO_DB_CERTIFICATE_PATH")
    db_user = Variable.get("MONGO_DB_USER")
    db_pw = Variable.get("MONGO_DB_PASSWORD")
    rs = Variable.get("MONGO_DB_REPLICA_SET")
    db = Variable.get("MONGO_DB_DATABASE_NAME")
    host = Variable.get("MONGO_DB_HOST")
    
    origin_mongo_connect = MongoConnect(cert_path, db_user, db_pw, host, rs, db, db)
    
    # Объявляем таск, который загружает данные.
    @task(task_id="pg_ranks_load")
    def pg_load_ranks():
        rest_loader = PG_RankLoader(origin_pg_connect, dwh_pg_connect, log)
        rest_loader.load_ranks()
    
    @task(task_id="pg_users_load")
    def pg_load_users():
        user_loader = PG_UserLoader(origin_pg_connect, dwh_pg_connect, log)
        user_loader.load_users()
    
    @task(task_id="pg_events_load")
    def pg_load_events():
        event_loader = PG_EventLoader(origin_pg_connect, dwh_pg_connect, log)
        event_loader.load_events()
    
    @task(task_id="mg_restaurants_load")
    def mg_load_restaurants():
        restaurants_pg_saver = RestaurantDestRepository()
        restaurants_collection_reader = RestaurantOriginRepository(origin_mongo_connect)
        restaurants_loader = MG_RestaurantLoader(restaurants_collection_reader, dwh_pg_connect, restaurants_pg_saver, log)
        restaurants_loader.load_restaurant()
    
    @task(task_id="mg_users_load")
    def mg_load_users():
        users_pg_saver = UserDestRepository()
        users_collection_reader = UserOriginRepository(origin_mongo_connect)
        users_loader = MG_UserLoader(users_collection_reader, dwh_pg_connect, users_pg_saver, log)
        users_loader.load_user()
        
    @task(task_id="mg_orders_load")
    def mg_load_orders():
        orders_pg_saver = OrderDestRepository()
        orders_collection_reader = OrderOriginRepository(origin_mongo_connect)
        orders_loader = MG_OrderLoader(orders_collection_reader, dwh_pg_connect, orders_pg_saver, log)
        orders_loader.load_order()
    
    # Инициализируем объявленные таски.
    pg_ranks = pg_load_ranks()
    pg_users = pg_load_users()
    pg_events = pg_load_events()
    mg_restaurants = mg_load_restaurants()
    mg_users = mg_load_users()
    mg_orders = mg_load_orders()
    
    pg_ranks  # type: ignore
    pg_users  # type: ignore
    pg_events  # type: ignore
    mg_restaurants  # type: ignore
    mg_users  # type: ignore
    mg_orders  # type: ignore
    
stg_dag = stg_dag()
